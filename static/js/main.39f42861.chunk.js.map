{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","emojiData","isLoading","emoji","undefined","getEmoji","localStorage","removeItem","setState","axios","get","then","data","catch","er","console","log","updateState","d","renderContent","src","style","marginTop","marginLeft","alt","onClick","renderEmoji","a","keys","Object","randomEmoji","Math","floor","random","length","setItem","e","getItem","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wSAqEeA,E,4MAhEbC,MAAQ,CACNC,UAAW,GACXC,WAAW,EACXC,WAAOC,G,EAaTC,SAAW,WACTC,aAAaC,WAAW,SACxB,EAAKC,SAAS,CAAEN,WAAW,EAAMD,UAAW,GAAIE,WAAOC,IACvDK,IACCC,IAAI,iCACJC,MAAK,SAAAR,GACJ,EAAKK,SAAS,CAAEP,UAAWE,EAAMS,KAAMV,WAAW,OAEnDW,OAAM,SAAAC,GAAE,OAAIC,QAAQC,IAAIF,O,EAG3BG,YAAc,SAACC,GAAD,OAAO,EAAKV,SAAS,CAAEL,MAAOe,K,EAE5CC,cAAgB,SAACC,GACf,OACE,yBAAKC,MAAO,CAAEC,UAAW,OAAQC,WAAY,SAC3C,yBAAKH,IAAKA,EAAKI,IAAI,UACnB,6BACE,4BAAQC,QAAS,EAAKpB,UAAtB,mB,EAMRqB,YAAc,WACZ,GAAI,EAAK1B,MAAMG,MACb,OAAO,EAAKgB,cAAc,EAAKnB,MAAMG,OAChC,GAAI,EAAKH,MAAMC,WAAa,EAAKD,MAAMC,UAAU0B,EAAG,CACzD,IAAMC,EAAOC,OAAOD,KAAK,EAAK5B,MAAMC,WAC9B6B,EAAcF,EAAKG,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMJ,EAAKM,UAGpE,OAFA5B,aAAa6B,QAAQ,QAAS,EAAKnC,MAAMC,UAAU6B,IACnD,EAAKb,YAAY,EAAKjB,MAAMC,UAAU6B,IAC/B,EAAKX,cAAc,EAAKnB,MAAMC,UAAU6B,IAE/C,OAAO,8D,kEA3CT,IAAMM,EAAI9B,aAAa+B,QAAQ,SAC/BtB,QAAQC,IAAI,IAAKoB,GACZA,EAGHE,KAAK9B,SAAS,CAAEL,MAAOiC,EAAGlC,WAAW,IAFrCoC,KAAKjC,a,+BA8CP,OADAU,QAAQC,IAAI,QAASsB,KAAKtC,OACrBsC,KAAKtC,MAAME,UAGP,2CAFAoC,KAAKZ,kB,GA1DAa,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.39f42861.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {\n    emojiData: {},\n    isLoading: true,\n    emoji: undefined,\n  };\n\n  componentDidMount() {\n    const e = localStorage.getItem('emoji');\n    console.log('e', e);\n    if (!e) {\n      this.getEmoji();\n    } else {\n      this.setState({ emoji: e, isLoading: false });\n    }\n  }\n\n  getEmoji = () => {\n    localStorage.removeItem('emoji');\n    this.setState({ isLoading: true, emojiData: {}, emoji: undefined });\n    axios\n    .get('https://api.github.com/emojis')\n    .then(emoji => {\n      this.setState({ emojiData: emoji.data, isLoading: false });\n    })\n    .catch(er => console.log(er));\n  }\n\n  updateState = (d) => this.setState({ emoji: d });\n\n  renderContent = (src) => {\n    return (\n      <div style={{ marginTop: '40vh', marginLeft: '45vw' }}>\n        <img src={src} alt=\"emoji\" />\n        <div>\n          <button onClick={this.getEmoji}>Pick another</button>\n        </div>\n      </div>\n    );\n  }\n\n  renderEmoji = () => {\n    if (this.state.emoji) {\n      return this.renderContent(this.state.emoji);\n    } else if (this.state.emojiData && this.state.emojiData.a) {\n      const keys = Object.keys(this.state.emojiData);\n      const randomEmoji = keys[Math.floor(Math.random() * Math.floor(keys.length))];\n      localStorage.setItem('emoji', this.state.emojiData[randomEmoji]);\n      this.updateState(this.state.emojiData[randomEmoji]);\n      return this.renderContent(this.state.emojiData[randomEmoji]);\n    } else {\n      return <div>Please try after sometime...</div>;\n    }\n  };\n\n  render() {\n    console.log('state', this.state);\n    if (!this.state.isLoading) {\n      return this.renderEmoji();\n    } else {\n      return <div>Loading...</div>;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}